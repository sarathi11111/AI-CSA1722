class Node:
    def __init__(self, position, cost, parent):
        self.position = position
        self.cost = cost
        self.parent = parent

def a_star(graph, start, goal):
    open_set = set()
    closed_set = set()

    start_node = Node(start, 0, None)
    open_set.add(start_node)

    while open_set:
        current_node = min(open_set, key=lambda node: node.cost)

        if current_node.position == goal:
            return reconstruct_path(current_node)

        open_set.remove(current_node)
        closed_set.add(current_node)

        for neighbor in graph[current_node.position]:
            new_cost = current_node.cost + graph[current_node.position][neighbor]

            if neighbor in closed_set and new_cost >= closed_set[neighbor].cost:
                continue

            if neighbor not in open_set or new_cost < open_set[neighbor].cost:
                open_set.add(Node(neighbor, new_cost, current_node))

    return None

def reconstruct_path(current_node):
    path = []

    while current_node is not None:
        path.append(current_node.position)
        current_node = current_node.parent

    path.reverse()
    return path

# Example usage:

graph = {
    'A': {'B': 10, 'C': 3},
    'B': {'D': 2, 'E': 5},
    'C': {'D': 4, 'F': 6},
    'D': {'G': 1},
    'E': {'G': 3},
    'F': {'G': 2},
}

start = 'A'
goal = 'G'

path = a_star(graph, start, goal)

print(path)

import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.bias_input_hidden = np.zeros((1, hidden_size))
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        self.bias_hidden_output = np.zeros((1, output_size))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def forward(self, inputs):
        # Calculate input to hidden layer
        self.hidden_sum = np.dot(inputs, self.weights_input_hidden) + self.bias_input_hidden
        self.hidden_output = self.sigmoid(self.hidden_sum)

        # Calculate hidden to output layer
        self.output_sum = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_hidden_output
        self.predicted_output = self.sigmoid(self.output_sum)
        return self.predicted_output

    def backward(self, inputs, targets, learning_rate):
        # Calculate error
        error = targets - self.predicted_output

        # Calculate gradients
        output_delta = error * self.sigmoid_derivative(self.predicted_output)
        hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_output)

        # Update weights and biases
        self.weights_hidden_output += np.dot(self.hidden_output.T, output_delta) * learning_rate
        self.bias_hidden_output += np.sum(output_delta, axis=0) * learning_rate
        self.weights_input_hidden += np.dot(inputs.T, hidden_delta) * learning_rate
        self.bias_input_hidden += np.sum(hidden_delta, axis=0) * learning_rate

    def train(self, inputs, targets, learning_rate, epochs):
        for epoch in range(epochs):
            self.forward(inputs)
            self.backward(inputs, targets, learning_rate)
            if epoch % 100 == 0:
                loss = np.mean(np.square(targets - self.predicted_output))
                print(f"Epoch {epoch}, Loss: {loss:.4f}")

    def predict(self, inputs):
        return self.forward(inputs)

# Example usage:
if __name__ == "__main__":
    # Define the neural network architecture
    input_size = 2
    hidden_size = 3
    output_size = 1

    # Create a neural network
    nn = NeuralNetwork(input_size, hidden_size, output_size)

    # Define training data
    inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    targets = np.array([[0], [1], [1], [0]])

    # Train the neural network
    nn.train(inputs, targets, learning_rate=0.1, epochs=1000)

    # Make predictions
    predictions = nn.predict(inputs)
    print("Predictions:")
    print(predictions)
